#include <stdio.h>
#define MAX_SIZE 10
void multiplyMatrices(int (*A)[MAX_SIZE], int (*B)[MAX_SIZE], int (*C)[MAX_SIZE], int rowsA, int colsA, int colsB) 
{
    for (int i = 0; i < rowsA; i++)
{
        for (int j = 0; j < colsB; j++) 
{
            *(*(C + i) + j) = 0;
            for (int k = 0; k < colsA; k++) 
{
                *(*(C + i) + j) += *(*(A + i) + k) * *(*(B + k) + j);
            }
        }
    }
}
void displayMatrix(int (*matrix)[MAX_SIZE], int rows, int cols)
{
    for (int i = 0; i < rows; i++)
{
        for (int j = 0; j < cols; j++) 
{
            printf("%d ", *(*(matrix + i) + j));
        }
        printf("\n");
    }
}
int main() 
{
    int A[MAX_SIZE][MAX_SIZE], B[MAX_SIZE][MAX_SIZE], C[MAX_SIZE][MAX_SIZE];
    int rowsA, colsA, rowsB, colsB;
    printf("Enter the number of rows and columns of the first matrix: ");
    scanf("%d %d", &rowsA, &colsA);
    printf("Enter elements of the first matrix:\n");
    for (int i = 0; i < rowsA; i++)
{
        for (int j = 0; j < colsA; j++)
{
            printf("Element [%d][%d]: ", i + 1, j + 1);
            scanf("%d", &A[i][j]);
        }
    }
    printf("Enter the number of columns of the second matrix (rows must match the first matrix's columns): ");
    scanf("%d", &colsB);
    rowsB = colsA;
    printf("Enter elements of the second matrix:\n");
    for (int i = 0; i < rowsB; i++)
{
        for (int j = 0; j < colsB; j++)
{
            printf("Element [%d][%d]: ", i + 1, j + 1);
            scanf("%d", &B[i][j]);
        }
    }
    multiplyMatrices(A, B, C, rowsA, colsA, colsB);
    printf("Resulting matrix after multiplication:\n");
    displayMatrix(C, rowsA, colsB);
    return 0;
}
